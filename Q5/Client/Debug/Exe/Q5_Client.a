;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/11/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// SPI functions
;#include <spi.h>
;
;#include <delay.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include <string.h>
;#include <stdbool.h>
;
;#define KEYPAD_R1 PORTC.0
;#define KEYPAD_R2 PORTC.1
;#define KEYPAD_R3 PORTC.2
;#define KEYPAD_R4 PORTC.3
;#define KEYPAD_C1 PINC.4
;#define KEYPAD_C2 PINC.5
;#define KEYPAD_C3 PINC.6
;
;#define KEYPAD_NUM0 0
;#define KEYPAD_NUM1 1
;#define KEYPAD_NUM2 2
;#define KEYPAD_NUM3 3
;#define KEYPAD_NUM4 4
;#define KEYPAD_NUM5 5
;#define KEYPAD_NUM6 6
;#define KEYPAD_NUM7 7
;#define KEYPAD_NUM8 8
;#define KEYPAD_NUM9 9
;#define KEYPAD_STAR  10
;#define KEYPAD_HASH  11
;
;// Declare your global variables here
;char data[20] = "";
;
;unsigned char key;
;unsigned char index;
;
;bool calced = false;
;bool first_num = true;
;
;
;unsigned char keypad_input();
;char read();
;void calculate();
;void send_data(char* d);
;
;void main(void)
; 0000 004B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 004C // Declare your local variables here
; 0000 004D 
; 0000 004E // Input/Output Ports initialization
; 0000 004F // Port A initialization
; 0000 0050 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0051 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0052 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0053 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0054 
; 0000 0055 // Port B initialization
; 0000 0056 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0057 DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0058 // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0059 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 005A 
; 0000 005B // Port C initialization
; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 005D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 005E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 005F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0060 
; 0000 0061 // Port D initialization
; 0000 0062 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0063 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0064 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0065 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0066 
; 0000 0067 // Timer/Counter 0 initialization
; 0000 0068 // Clock source: System Clock
; 0000 0069 // Clock value: Timer 0 Stopped
; 0000 006A // Mode: Normal top=0xFF
; 0000 006B // OC0 output: Disconnected
; 0000 006C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006D TCNT0=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 006E OCR0=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 006F 
; 0000 0070 // Timer/Counter 1 initialization
; 0000 0071 // Clock source: System Clock
; 0000 0072 // Clock value: Timer1 Stopped
; 0000 0073 // Mode: Normal top=0xFFFF
; 0000 0074 // OC1A output: Disconnected
; 0000 0075 // OC1B output: Disconnected
; 0000 0076 // Noise Canceler: Off
; 0000 0077 // Input Capture on Falling Edge
; 0000 0078 // Timer1 Overflow Interrupt: Off
; 0000 0079 // Input Capture Interrupt: Off
; 0000 007A // Compare A Match Interrupt: Off
; 0000 007B // Compare B Match Interrupt: Off
; 0000 007C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 007D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 007E TCNT1H=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 007F TCNT1L=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0080 ICR1H=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0081 ICR1L=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0082 OCR1AH=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0083 OCR1AL=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0084 OCR1BH=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0085 OCR1BL=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0086 
; 0000 0087 // Timer/Counter 2 initialization
; 0000 0088 // Clock source: System Clock
; 0000 0089 // Clock value: Timer2 Stopped
; 0000 008A // Mode: Normal top=0xFF
; 0000 008B // OC2 output: Disconnected
; 0000 008C ASSR=0<<AS2;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 008D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 008E TCNT2=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 008F OCR2=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0090 
; 0000 0091 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0092 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0093 
; 0000 0094 // External Interrupt(s) initialization
; 0000 0095 // INT0: Off
; 0000 0096 // INT1: Off
; 0000 0097 // INT2: Off
; 0000 0098 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0099 MCUCSR=(0<<ISC2);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 009A 
; 0000 009B // USART initialization
; 0000 009C // USART disabled
; 0000 009D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 009E 
; 0000 009F // Analog Comparator initialization
; 0000 00A0 // Analog Comparator: Off
; 0000 00A1 // The Analog Comparator's positive input is
; 0000 00A2 // connected to the AIN0 pin
; 0000 00A3 // The Analog Comparator's negative input is
; 0000 00A4 // connected to the AIN1 pin
; 0000 00A5 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 00A6 SFIOR=(0<<ACME);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 00A7 
; 0000 00A8 // ADC initialization
; 0000 00A9 // ADC disabled
; 0000 00AA ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00AB 
; 0000 00AC // SPI initialization
; 0000 00AD // SPI Type: Master
; 0000 00AE // SPI Clock Rate: 2000.000 kHz
; 0000 00AF // SPI Clock Phase: Cycle Start
; 0000 00B0 // SPI Clock Polarity: Low
; 0000 00B1 // SPI Data Order: MSB First
; 0000 00B2 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00B3 SPSR=(0<<SPI2X);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00B4 
; 0000 00B5 // TWI initialization
; 0000 00B6 // TWI disabled
; 0000 00B7 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00B8 
; 0000 00B9 // Alphanumeric LCD initialization
; 0000 00BA // Connections are specified in the
; 0000 00BB // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00BC // RS - PORTA Bit 0
; 0000 00BD // RD - PORTA Bit 1
; 0000 00BE // EN - PORTA Bit 2
; 0000 00BF // D4 - PORTA Bit 4
; 0000 00C0 // D5 - PORTA Bit 5
; 0000 00C1 // D6 - PORTA Bit 6
; 0000 00C2 // D7 - PORTA Bit 7
; 0000 00C3 // Characters/line: 16
; 0000 00C4 lcd_init(16);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00C5 
; 0000 00C6 while (1)
;PCODE: $00000056 VOL: 0
; 0000 00C7       {
; 0000 00C8 
; 0000 00C9           key = keypad_input();
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00CA           if (key != 255) {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00CB               if (calced) {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00CC                   lcd_clear();
;PCODE: $0000005E VOL: 0
; 0000 00CD                   data[0] = 0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00CE                   calced = false;
;PCODE: $00000061 VOL: 0
; 0000 00CF               }
; 0000 00D0               while(keypad_input() != 255);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00D1               delay_ms(20);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00D2 
; 0000 00D3               if (key >= 5 && key <= 9) {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00D4                   first_num = true;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00D5                   switch (key) {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00D6                       case 5:
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00D7                       strcat(data, "5");
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00D8                       first_num = false;
;PCODE: $00000081 VOL: 0
; 0000 00D9                       break;
;PCODE: $00000082 VOL: 0
; 0000 00DA                       case 6:
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00DB                       strcat(data, "6");
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00DC                       first_num = false;
;PCODE: $0000008B VOL: 0
; 0000 00DD                       break;
;PCODE: $0000008C VOL: 0
; 0000 00DE                       case 7:
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00DF                       strcat(data, "7");
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00E0                       first_num = false;
;PCODE: $00000095 VOL: 0
; 0000 00E1                       break;
;PCODE: $00000096 VOL: 0
; 0000 00E2                       case 8:
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00E3                       strcat(data, "8");
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00E4                       first_num = false;
;PCODE: $0000009F VOL: 0
; 0000 00E5                       break;
;PCODE: $000000A0 VOL: 0
; 0000 00E6                       case 9:
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00E7                       strcat(data, "9");
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E8                       first_num = false;
;PCODE: $000000A9 VOL: 0
; 0000 00E9                       break;
;PCODE: $000000AA VOL: 0
; 0000 00EA 
; 0000 00EB                   }
;PCODE: $000000AB VOL: 0
; 0000 00EC               }
; 0000 00ED               else if (key == 0) {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00EE                       first_num = false;
;PCODE: $000000B0 VOL: 0
; 0000 00EF                       strcat(data, "0");
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00F0               }
; 0000 00F1               else if ( (key <= 4 && key >= 1) || (key == KEYPAD_HASH || key == KEYPAD_STAR)){
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F2                   switch (key) {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F3                       case 1:
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00F4                       lcd_clear();
;PCODE: $000000D0 VOL: 0
; 0000 00F5                       lcd_puts("0:1, 1:+");
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00F6 
; 0000 00F7                       while(keypad_input() == 255);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F8                       index = keypad_input();
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00F9 
; 0000 00FA                       if (index == 0) {
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00FB                           strcat(data, "1");
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00FC                           first_num = false;
;PCODE: $000000E3 VOL: 0
; 0000 00FD                       } else if (index == 1) {
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00FE                           if (!first_num) {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00FF                               strcat(data, "+");
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0100                               first_num = true;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0101                           }
; 0000 0102                       }
;PCODE: $000000F2 VOL: 0
; 0000 0103 
; 0000 0104                       delay_ms(200);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0105                       break;
;PCODE: $000000F8 VOL: 0
; 0000 0106 
; 0000 0107                       case 2:
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0108                       lcd_clear();
;PCODE: $000000FC VOL: 0
; 0000 0109                       lcd_puts("0:2, 1:-");
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 010A 
; 0000 010B                       while(keypad_input() == 255);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 010C                       index = keypad_input();
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 010D 
; 0000 010E                       if (index == 0) {
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 010F                           strcat(data, "2");
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0110                           first_num = false;
;PCODE: $0000010F VOL: 0
; 0000 0111 
; 0000 0112                       } else if (index == 1) {
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0113                           if (!first_num) {
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0114                               strcat(data, "-");
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0115                               first_num = true;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0116                           }
; 0000 0117                       }
;PCODE: $0000011E VOL: 0
; 0000 0118 
; 0000 0119                       delay_ms(200);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 011A                       break;
;PCODE: $00000124 VOL: 0
; 0000 011B 
; 0000 011C                       case 3:
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 011D                       lcd_clear();
;PCODE: $00000128 VOL: 0
; 0000 011E                       lcd_puts("0:3, 1:x");
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 011F 
; 0000 0120                       while(keypad_input() == 255);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0121                       index = keypad_input();
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0122 
; 0000 0123                       if (index == 0) {
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0124                           strcat(data, "3");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0125                           first_num = false;
;PCODE: $0000013B VOL: 0
; 0000 0126 
; 0000 0127                       } else if (index == 1) {
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0128                           if (!first_num) {
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0129                               strcat(data, "x");
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 012A                               first_num = true;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 012B                           }
; 0000 012C                       }
;PCODE: $0000014A VOL: 0
; 0000 012D 
; 0000 012E                       delay_ms(200);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 012F                       break;
;PCODE: $00000150 VOL: 0
; 0000 0130 
; 0000 0131                       case 4:
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0132                       lcd_clear();
;PCODE: $00000154 VOL: 0
; 0000 0133                       lcd_puts("0:4, 1:/");
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0134 
; 0000 0135                       while(keypad_input() == 255);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0136                       index = keypad_input();
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0137 
; 0000 0138                       if (index == 0) {
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0139                           strcat(data, "4");
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 013A                           first_num = false;
;PCODE: $00000167 VOL: 0
; 0000 013B 
; 0000 013C                       } else if (index == 1) {
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 013D                           if (!first_num) {
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 013E                               strcat(data, "/");
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 013F                               first_num = true;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0140                           }
; 0000 0141                       }
;PCODE: $00000176 VOL: 0
; 0000 0142 
; 0000 0143                       delay_ms(200);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0144                       break;
;PCODE: $0000017C VOL: 0
; 0000 0145 
; 0000 0146                       case KEYPAD_HASH:
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0147                       lcd_clear();
;PCODE: $00000180 VOL: 0
; 0000 0148                       lcd_puts("0:=, 1:.");
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0149 
; 0000 014A                       while(keypad_input() == 255);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 014B                       index = keypad_input();
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 014C 
; 0000 014D                       if (index == 0) {
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 014E 
; 0000 014F                           calculate();
;PCODE: $0000018E VOL: 0
; 0000 0150 
; 0000 0151                           calced = true;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0152 
; 0000 0153                       } else if (index == 1) {
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0154                           if (!first_num) {
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0155                               strcat(data, ".");
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0156                               first_num = true;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0157                           }
; 0000 0158                       }
;PCODE: $0000019F VOL: 0
; 0000 0159 
; 0000 015A                       delay_ms(200);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 015B                       break;
;PCODE: $000001A5 VOL: 0
; 0000 015C 
; 0000 015D                       case KEYPAD_STAR:
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 015E 
; 0000 015F                       data[0] = 0;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0160                       first_num = true;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0161                       calced = false;
;PCODE: $000001AD VOL: 0
; 0000 0162 
; 0000 0163                       delay_ms(200);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0164                       break;
;PCODE: $000001B1 VOL: 0
; 0000 0165                   }
;PCODE: $000001B2 VOL: 0
; 0000 0166               }
; 0000 0167               lcd_clear();
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0168               lcd_puts(data);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0169           }
; 0000 016A       }
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 016B }
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0

	.DSEG
_0x12:
	.BYTE 0x4B
;
;unsigned char keypad_input(){
; 0000 016D unsigned char keypad_input(){

	.CSEG
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 016E 
; 0000 016F     unsigned char result = 255;
; 0000 0170         ////////////////////////  ROW1 ////////////////////////
; 0000 0171         KEYPAD_R1 = 1; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0;
;PCODE: $000001C1 VOL: 0
;	result -> R17
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0172         delay_ms(5);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0173         if (KEYPAD_C1)
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0174         result = KEYPAD_NUM1;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0175         else if (KEYPAD_C2)
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0176         result = KEYPAD_NUM2;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0177         else if (KEYPAD_C3)
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0178         result = KEYPAD_NUM3;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0179 
; 0000 017A 
; 0000 017B         ////////////////////////  ROW2 ////////////////////////
; 0000 017C         KEYPAD_R1 = 0; KEYPAD_R2 = 1;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 017D         delay_ms(5);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 017E         if (KEYPAD_C1)
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 017F         result = KEYPAD_NUM4;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0180         else if (KEYPAD_C2)
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0181         result = KEYPAD_NUM5;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0182         else if (KEYPAD_C3)
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0183         result = KEYPAD_NUM6;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0184 
; 0000 0185 
; 0000 0186         ////////////////////////  ROW3 ////////////////////////
; 0000 0187         KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 1;  KEYPAD_R4 = 0;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0188         delay_ms(5);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0189         if (KEYPAD_C1)
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 018A         result = KEYPAD_NUM7;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 018B         else if (KEYPAD_C2)
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 018C         result = KEYPAD_NUM8;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 018D         else if (KEYPAD_C3)
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 018E         result = KEYPAD_NUM9;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 018F 
; 0000 0190 
; 0000 0191         ////////////////////////  ROW4 ////////////////////////
; 0000 0192         KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 1;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0193         delay_ms(5);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0194         if (KEYPAD_C1)
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0195         result = KEYPAD_STAR;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0196         else if (KEYPAD_C2)
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0197         result = KEYPAD_NUM0;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0198         else if (KEYPAD_C3)
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0199         result = KEYPAD_HASH;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 019A     return result;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 019B }
;PCODE: $0000024B VOL: 0
;void calculate(){
; 0000 019C void calculate(){
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 019D 
; 0000 019E     char* ch;
; 0000 019F     bool flag = true;
; 0000 01A0     send_data(data);
;PCODE: $0000024E VOL: 0
;	*ch -> R16,R17
;	flag -> R19
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 01A1     strcat(data, "=");
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 01A2     do {
;PCODE: $00000258 VOL: 0
; 0000 01A3         send_data("");
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 01A4         *ch = read();
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 01A5 
; 0000 01A6         if (*ch != '#') {
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 01A7             strcat(data, ch);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 01A8         } else {
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 01A9             flag = false;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01AA         }
;PCODE: $0000026B VOL: 0
; 0000 01AB     } while(flag);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 01AC }
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0

	.DSEG
_0x82:
	.BYTE 0x3
;void send_data(char* d)
; 0000 01AE {

	.CSEG
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 01AF     int len = strlen(d);
; 0000 01B0     int i = 0;
; 0000 01B1 	for(; i < len; i++)
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;	*d -> Y+4
;	len -> R16,R17
;	i -> R18,R19
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01B2 	{
; 0000 01B3         SPDR = d[i];
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01B4         while((SPSR&(1<<SPIF))==0);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 01B5         delay_ms(2);
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01B6     }
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01B7     SPDR = '#';
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 01B8     while((SPSR&(1<<SPIF))==0);
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 01B9     delay_ms(2);
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 01BA }
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;char read()
; 0000 01BC {
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 01BD     while((SPSR&(1<<SPIF))==0);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01BE     return SPDR;
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01BF }
;PCODE: $000002B1 VOL: 0
