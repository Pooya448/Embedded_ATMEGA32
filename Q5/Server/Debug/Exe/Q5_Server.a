;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/11/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include <string.h>
;#include <stdbool.h>
;#include <delay.h>
;// Declare your global variables here
;
;// SPI functions
;#include <spi.h>
;
;char equation[100] = "";
;char operand1[100] = "";
;char operand2[100] = "";
;char op[1] = "";
;
;char cur_char[1] = "";
;
;float op1 = 0.0;
;float op2 = 0.0;
;
;float result = 0;
;
;char final_string[500];
;
;bool op_found = false;
;
;char buffer;
;
;void reset_server(){
; 0000 0038 void reset_server(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039     equation[0] = '\0';
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003A     operand1[0] = '\0';
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003B     operand2[0] ='\0';
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003C     op[0] = '\0';
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003D     cur_char[0] = '\0';
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003E     final_string[0] = '\0';
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003F 
; 0000 0040     op1 = 0.0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0041     op2 = 0.0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0042     result = -3.1414938;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0043 
; 0000 0044     op_found = false;
;PCODE: $00000021 VOL: 0
; 0000 0045 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;void communicate();
;void send_data(char* d);
;char read();
;void parse_equation();
;
;void main(void)
; 0000 004D {
;PCODE: $00000024 VOL: 0
; 0000 004E // Declare your local variables here
; 0000 004F 
; 0000 0050 // Input/Output Ports initialization
; 0000 0051 // Port A initialization
; 0000 0052 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0053 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0054 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0055 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0056 
; 0000 0057 // Port B initialization
; 0000 0058 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRB=(0<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 005A // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 005C 
; 0000 005D // Port C initialization
; 0000 005E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005F DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0060 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0061 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0062 
; 0000 0063 // Port D initialization
; 0000 0064 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0065 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0066 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0067 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0068 
; 0000 0069 // Timer/Counter 0 initialization
; 0000 006A // Clock source: System Clock
; 0000 006B // Clock value: Timer 0 Stopped
; 0000 006C // Mode: Normal top=0xFF
; 0000 006D // OC0 output: Disconnected
; 0000 006E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006F TCNT0=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0070 OCR0=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0071 
; 0000 0072 // Timer/Counter 1 initialization
; 0000 0073 // Clock source: System Clock
; 0000 0074 // Clock value: Timer1 Stopped
; 0000 0075 // Mode: Normal top=0xFFFF
; 0000 0076 // OC1A output: Disconnected
; 0000 0077 // OC1B output: Disconnected
; 0000 0078 // Noise Canceler: Off
; 0000 0079 // Input Capture on Falling Edge
; 0000 007A // Timer1 Overflow Interrupt: Off
; 0000 007B // Input Capture Interrupt: Off
; 0000 007C // Compare A Match Interrupt: Off
; 0000 007D // Compare B Match Interrupt: Off
; 0000 007E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 007F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0080 TCNT1H=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0081 TCNT1L=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0082 ICR1H=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0083 ICR1L=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0084 OCR1AH=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0085 OCR1AL=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0086 OCR1BH=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0087 OCR1BL=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0088 
; 0000 0089 // Timer/Counter 2 initialization
; 0000 008A // Clock source: System Clock
; 0000 008B // Clock value: Timer2 Stopped
; 0000 008C // Mode: Normal top=0xFF
; 0000 008D // OC2 output: Disconnected
; 0000 008E ASSR=0<<AS2;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 008F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0090 TCNT2=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0091 OCR2=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0092 
; 0000 0093 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0094 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0095 
; 0000 0096 // External Interrupt(s) initialization
; 0000 0097 // INT0: Off
; 0000 0098 // INT1: Off
; 0000 0099 // INT2: Off
; 0000 009A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 009B MCUCSR=(0<<ISC2);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 009C 
; 0000 009D // USART initialization
; 0000 009E // USART disabled
; 0000 009F UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00A0 
; 0000 00A1 // Analog Comparator initialization
; 0000 00A2 // Analog Comparator: Off
; 0000 00A3 // The Analog Comparator's positive input is
; 0000 00A4 // connected to the AIN0 pin
; 0000 00A5 // The Analog Comparator's negative input is
; 0000 00A6 // connected to the AIN1 pin
; 0000 00A7 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A8 SFIOR=(0<<ACME);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00A9 
; 0000 00AA // ADC initialization
; 0000 00AB // ADC disabled
; 0000 00AC ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00AD 
; 0000 00AE // SPI initialization
; 0000 00AF // SPI Type: Slave
; 0000 00B0 // SPI Clock Rate: 2000.000 kHz
; 0000 00B1 // SPI Clock Phase: Cycle Start
; 0000 00B2 // SPI Clock Polarity: Low
; 0000 00B3 // SPI Data Order: MSB First
; 0000 00B4 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00B5 SPSR=(0<<SPI2X);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00B6 
; 0000 00B7 // TWI initialization
; 0000 00B8 // TWI disabled
; 0000 00B9 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00BA 
; 0000 00BB // Alphanumeric LCD initialization
; 0000 00BC // Connections are specified in the
; 0000 00BD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00BE // RS - PORTA Bit 0
; 0000 00BF // RD - PORTA Bit 1
; 0000 00C0 // EN - PORTA Bit 2
; 0000 00C1 // D4 - PORTA Bit 4
; 0000 00C2 // D5 - PORTA Bit 5
; 0000 00C3 // D6 - PORTA Bit 6
; 0000 00C4 // D7 - PORTA Bit 7
; 0000 00C5 // Characters/line: 16
; 0000 00C6 lcd_init(16);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00C7 
; 0000 00C8 while (1)
;PCODE: $0000006D VOL: 0
; 0000 00C9       {
; 0000 00CA           communicate();
;PCODE: $0000006E VOL: 0
; 0000 00CB           reset_server();
;PCODE: $0000006F VOL: 0
; 0000 00CC       }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00CD }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;void parse_equation(){
; 0000 00CE void parse_equation(){
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00CF 
; 0000 00D0     int len = strlen(equation);
; 0000 00D1 
; 0000 00D2     int i = 0;
; 0000 00D3     for (; i < len; i++) {
;PCODE: $00000077 VOL: 0
;	len -> R16,R17
;	i -> R18,R19
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00D4         if ( (equation[i] == '+') ||  (equation[i] == '-') || (equation[i] == 'x') || (equation[i] == '/') ){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00D5             op[0] = equation[i];
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00D6             op_found = true;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00D7         } else {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D8             cur_char[0] = equation[i];
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D9             if (op_found) {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00DA                 strcat(operand2, cur_char);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00DB             } else {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00DC                 strcat(operand1, cur_char);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00DD             }
;PCODE: $000000B2 VOL: 0
; 0000 00DE         }
;PCODE: $000000B3 VOL: 0
; 0000 00DF     }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E0 
; 0000 00E1     op1 = (float) atof(operand1);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00E2     op2 = (float) atof(operand2);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E3 
; 0000 00E4     switch (op[0]) {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E5         case '+':
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E6         result = op1 + op2;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E7         break;
;PCODE: $000000C7 VOL: 0
; 0000 00E8         case '-':
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E9         result = op1 - op2;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00EA         break;
;PCODE: $000000CF VOL: 0
; 0000 00EB         case 'x':
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00EC         result = op1 * op2;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00ED         break;
;PCODE: $000000D7 VOL: 0
; 0000 00EE         case '/':
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00EF         result = op1 / op2;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00F0         break;
;PCODE: $000000DF VOL: 0
; 0000 00F1 
; 0000 00F2     }
;PCODE: $000000E0 VOL: 0
; 0000 00F3     ftoa(result, 3, final_string);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00F4 }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;void communicate(){
; 0000 00F5 void communicate(){
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00F6     int len = 0;
; 0000 00F7     char* ch = '';
; 0000 00F8 
; 0000 00F9     do {
;PCODE: $000000ED VOL: 0
;	len -> R16,R17
;	*ch -> R18,R19
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00FA         *ch = read();
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00FB 
; 0000 00FC         if (*ch != '#') {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00FD             len = strlen(equation);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00FE             strcat(equation, ch);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00FF         }
; 0000 0100 
; 0000 0101     } while(*ch != '#');
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0102 
; 0000 0103     parse_equation();
;PCODE: $00000109 VOL: 0
; 0000 0104 
; 0000 0105     if (result != -3.1414938) {
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0106         lcd_clear();
;PCODE: $0000010D VOL: 0
; 0000 0107         lcd_puts(equation);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0108     }
; 0000 0109 
; 0000 010A     memset(equation, 0, sizeof(equation));
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 010B 
; 0000 010C     send_data(final_string);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 010D 
; 0000 010E     memset(final_string, 0, sizeof(final_string));
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 010F 
; 0000 0110 }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;void send_data(char* d)
; 0000 0112 {
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0113     int len = strlen(d);
; 0000 0114     int i = 0;
; 0000 0115     for(; i < len; i++)
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;	*d -> Y+4
;	len -> R16,R17
;	i -> R18,R19
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0116     {
; 0000 0117         read();
;PCODE: $00000134 VOL: 0
; 0000 0118         SPDR = d[i];
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0119         while((SPSR&(1<<SPIF))==0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 011A     }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 011B     SPDR = '#';
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 011C     while((SPSR&(1<<SPIF))==0);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 011D     buffer = SPDR;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 011E 
; 0000 011F     delay_ms(5);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0120 }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;char read()
; 0000 0122 {
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0123     while((SPSR&(1<<SPIF))==0);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0124     return SPDR;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0125 }
;PCODE: $00000160 VOL: 0
