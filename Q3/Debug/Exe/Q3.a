;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/11/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdbool.h>
;
;#define _BV(bit)( 1<<(bit))
;
;// Declare your global variables here
;int second = 0;
;int minute = 49;
;int hour = 5;
;int day = 21;
;int month = 9;
;int year = 99;

	.DSEG
;
;bool is_setting = false;
;int setting_pos = 0;
;unsigned char segments[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
;
;int blink = 0;
;int blink_cycle = 10;
;void update_time();
;void get_next_setting();
;void increase();
;void decrease();
;void write();
;void write_setting_mode();
;// External Interrupt 0 service routine -> Setting Button
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0034 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0035     is_setting = !is_setting;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0036     setting_pos = 0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0037     PORTD = 0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0038 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// External Interrupt 1 service routine -> Change Setting Pos Button
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 003C {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003D     if (is_setting) {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003E         get_next_setting();
;PCODE: $0000001E VOL: 0
; 0000 003F         blink = 1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0040     }
; 0000 0041 
; 0000 0042 }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;// External Interrupt 2 service routine -> Increase and Decrease
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0046 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0047     if (is_setting) {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0048         if (PINB & _BV(7)) {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0049             decrease();
;PCODE: $0000002D VOL: 0
; 0000 004A         } else {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004B             increase();
;PCODE: $00000030 VOL: 0
; 0000 004C         }
;PCODE: $00000031 VOL: 0
; 0000 004D     }
; 0000 004E }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0052 {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0053 
; 0000 0054     if (!is_setting) {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0055         PORTD ^= 0x01;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0056         update_time();
;PCODE: $0000003F VOL: 0
; 0000 0057     }
; 0000 0058 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;void increase(){
; 0000 0059 void increase(){
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005A     switch (setting_pos) {
;PCODE: $00000046 VOL: 0
; 0000 005B         case 0:
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005C             hour++;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005D             if (hour >= 24) {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005E                 hour = 0;
;PCODE: $0000004F VOL: 0
; 0000 005F             }
; 0000 0060             break;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0061         case 1:
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0062             minute++;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0063             if (minute >= 60) {
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0064                 minute = 0;
;PCODE: $0000005B VOL: 0
; 0000 0065             }
; 0000 0066             break;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0067         case 2:
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0068             year++;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0069             if (year >= 100) {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 006A                 year = 0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 006B             }
; 0000 006C             break;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006D         case 3:
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006E             month++;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 006F             if (month >= 13) {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0070                 month = 1;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0071             }
; 0000 0072             break;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0073         case 4:
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0074             day++;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0075             if (day >= 31) {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0076                 day = 1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0077             }
; 0000 0078             break;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0079     }
;PCODE: $00000086 VOL: 0
; 0000 007A 
; 0000 007B }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;void decrease(){
; 0000 007C void decrease(){
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007D     switch (setting_pos) {
;PCODE: $0000008B VOL: 0
; 0000 007E         case 0:
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 007F             hour--;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0080             if (hour < 0) {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0081                 hour = 23;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0082             }
; 0000 0083             break;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0084         case 1:
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0085             minute--;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0086             if (minute < 0) {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0087                 minute = 59;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0088             }
; 0000 0089             break;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 008A         case 2:
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 008B             year--;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008C             if (year < 0) {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008D                 year = 99;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 008E             }
; 0000 008F             break;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0090         case 3:
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0091             month--;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0092             if (month < 0) {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0093                 month = 12;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0094             }
; 0000 0095             break;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0096         case 4:
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0097             day--;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0098             if (day < 0) {
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0099                 day = 30;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 009A             }
; 0000 009B             break;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 009C     }
;PCODE: $000000C9 VOL: 0
; 0000 009D 
; 0000 009E }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;void get_next_setting(){
; 0000 009F void get_next_setting(){
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A0     setting_pos++;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00A1     if (setting_pos >= 5) {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00A2         setting_pos = 0;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00A3     }
; 0000 00A4 }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;void update_time(){
; 0000 00A5 void update_time(){
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A6     second++;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00A7     if (second >= 60) {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00A8         minute++;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A9         second = 0;
;PCODE: $000000E5 VOL: 0
; 0000 00AA     }
; 0000 00AB     if (minute >= 60) {
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00AC         hour++;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00AD         minute = 0;
;PCODE: $000000ED VOL: 0
; 0000 00AE     }
; 0000 00AF     if (hour >= 24) {
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00B0         day++;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B1         hour = 0;
;PCODE: $000000F5 VOL: 0
; 0000 00B2     }
; 0000 00B3     if (day >= 31) {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00B4         month++;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00B5         day = 1;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B6     }
; 0000 00B7     if (month >= 13) {
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B8         year++;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B9         month = 1;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00BA     }
; 0000 00BB }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;void write(){
; 0000 00BC void write(){
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00BD     int year_l = year / 10;
; 0000 00BE     int year_r = year % 10;
; 0000 00BF     int month_l = month / 10;
; 0000 00C0     int month_r = month % 10;
; 0000 00C1     int day_l = day / 10;
; 0000 00C2     int day_r = day % 10;
; 0000 00C3     int hour_l = hour / 10;
; 0000 00C4     int hour_r = hour % 10;
; 0000 00C5     int minute_l = minute / 10;
; 0000 00C6     int minute_r = minute % 10;
; 0000 00C7 
; 0000 00C8     //Minute Right
; 0000 00C9     PORTC = 0b11110111;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;	year_l -> R16,R17
;	year_r -> R18,R19
;	month_l -> R20,R21
;	month_r -> Y+18
;	day_l -> Y+16
;	day_r -> Y+14
;	hour_l -> Y+12
;	hour_r -> Y+10
;	minute_l -> Y+8
;	minute_r -> Y+6
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00CA     PORTA = segments[minute_r];
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00CB     delay_ms(2);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00CC 
; 0000 00CD     // Minute Left
; 0000 00CE     PORTC = 0b11111011;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00CF     PORTA = segments[minute_l];
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00D0     delay_ms(2);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00D1 
; 0000 00D2     // Hour Right
; 0000 00D3     PORTC = 0b11111101;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00D4     PORTA = segments[hour_r];
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00D5     delay_ms(2);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00D6 
; 0000 00D7     // Hour Left
; 0000 00D8     PORTC = 0b11111110;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00D9     PORTA = segments[hour_l];
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00DA     delay_ms(2);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00DB 
; 0000 00DC     PORTC = 0b01111111;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00DD 
; 0000 00DE     // Day Right
; 0000 00DF     PORTB = 0b10111111;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00E0     PORTA = segments[day_r];
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00E1     delay_ms(2);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00E2 
; 0000 00E3     // Day Left
; 0000 00E4     PORTB = 0b11011111;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00E5     PORTA = segments[day_l];
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00E6     delay_ms(2);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E7 
; 0000 00E8     // Month Right
; 0000 00E9     PORTB = 0b11101111;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00EA     PORTA = segments[month_r];
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00EB     delay_ms(2);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00EC     // Month Left
; 0000 00ED     PORTB = 0b11110111;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00EE     PORTA = segments[month_l];
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00EF     delay_ms(2);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00F0 
; 0000 00F1     // Year Right
; 0000 00F2     PORTB = 0b11111101;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00F3     PORTA = segments[year_r];
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00F4     delay_ms(2);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00F5 
; 0000 00F6     // Year Left
; 0000 00F7     PORTB = 0b11111110;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00F8     PORTA = segments[year_l];
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00F9     delay_ms(2);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00FA 
; 0000 00FB     PORTB = 0b01111111;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00FC }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;void write_setting_mode(){
; 0000 00FD void write_setting_mode(){
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00FE     int year_l = year / 10;
; 0000 00FF     int year_r = year % 10;
; 0000 0100     int month_l = month / 10;
; 0000 0101     int month_r = month % 10;
; 0000 0102     int day_l = day / 10;
; 0000 0103     int day_r = day % 10;
; 0000 0104     int hour_l = hour / 10;
; 0000 0105     int hour_r = hour % 10;
; 0000 0106     int minute_l = minute / 10;
; 0000 0107     int minute_r = minute % 10;
; 0000 0108 
; 0000 0109     // Minute
; 0000 010A     if (setting_pos == 1) {
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;	year_l -> R16,R17
;	year_r -> R18,R19
;	month_l -> R20,R21
;	month_r -> Y+18
;	day_l -> Y+16
;	day_r -> Y+14
;	hour_l -> Y+12
;	hour_r -> Y+10
;	minute_l -> Y+8
;	minute_r -> Y+6
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 010B         if (blink > 0) {
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 010C             //Minute Right
; 0000 010D             PORTC = 0b11110111;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 010E             PORTA = 0x00;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 010F             delay_ms(2);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0110 
; 0000 0111             // Minute Left
; 0000 0112             PORTC = 0b11111011;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0113             PORTA = 0x00;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0114             delay_ms(2);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0115             blink++;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0116             if (blink >= blink_cycle) {
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0117                 blink = -1;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0118             }
; 0000 0119         } else {
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 011A             //Minute Right
; 0000 011B             PORTC = 0b11110111;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 011C             PORTA = segments[minute_r];
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 011D             delay_ms(2);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 011E 
; 0000 011F             // Minute Left
; 0000 0120             PORTC = 0b11111011;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0121             PORTA = segments[minute_l];
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0122             delay_ms(2);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0123             blink--;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0124             if (blink <= -blink_cycle) {
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0125                 blink = 1;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0126             }
; 0000 0127         }
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0128     } else {
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0129         //Minute Right
; 0000 012A         PORTC = 0b11110111;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 012B         PORTA = segments[minute_r];
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 012C         delay_ms(2);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 012D 
; 0000 012E         // Minute Left
; 0000 012F         PORTC = 0b11111011;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0130         PORTA = segments[minute_l];
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0131         delay_ms(2);
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0132     }
;PCODE: $0000021A VOL: 0
; 0000 0133 
; 0000 0134     // Hour
; 0000 0135     if (setting_pos == 0) {
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0136         if (blink > 0) {
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0137             // Hour Right
; 0000 0138             PORTC = 0b11111101;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0139             PORTA = 0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 013A             delay_ms(2);
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 013B 
; 0000 013C             // Hour Left
; 0000 013D             PORTC = 0b11111110;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 013E             PORTA = 0x00;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 013F             delay_ms(2);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0140 
; 0000 0141             PORTC = 0b01111111;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0142 
; 0000 0143             blink++;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0144             if (blink >= blink_cycle) {
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0145                 blink = -1;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0146             }
; 0000 0147         } else {
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0148             // Hour Right
; 0000 0149             PORTC = 0b11111101;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 014A             PORTA = segments[hour_r];
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 014B             delay_ms(2);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 014C 
; 0000 014D             // Hour Left
; 0000 014E             PORTC = 0b11111110;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 014F             PORTA = segments[hour_l];
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0150             delay_ms(2);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0151 
; 0000 0152             PORTC = 0b01111111;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0153 
; 0000 0154             blink--;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0155             if (blink <= -blink_cycle) {
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0156                 blink = 1;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0157             }
; 0000 0158         }
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0159     } else {
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 015A         // Hour Right
; 0000 015B         PORTC = 0b11111101;
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 015C         PORTA = segments[hour_r];
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 015D         delay_ms(2);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 015E 
; 0000 015F         // Hour Left
; 0000 0160         PORTC = 0b11111110;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0161         PORTA = segments[hour_l];
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0162         delay_ms(2);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0163 
; 0000 0164         PORTC = 0b01111111;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0165     }
;PCODE: $00000275 VOL: 0
; 0000 0166     //
; 0000 0167     // Day
; 0000 0168     if (setting_pos == 4) {
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0169         if (blink > 0) {
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 016A             // Day Right
; 0000 016B             PORTB = 0b10111111;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 016C             PORTA = 0x00;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 016D             delay_ms(2);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 016E 
; 0000 016F             // Day Left
; 0000 0170             PORTB = 0b11011111;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0171             PORTA = 0x00;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0172             delay_ms(2);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0173 
; 0000 0174             blink++;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0175             if (blink >= blink_cycle) {
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0176                 blink = -1;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0177             }
; 0000 0178         } else {
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0179             // Day Right
; 0000 017A             PORTB = 0b10111111;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 017B             PORTA = segments[day_r];
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 017C             delay_ms(2);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 017D 
; 0000 017E             // Day Left
; 0000 017F             PORTB = 0b11011111;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0180             PORTA = segments[day_l];
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0181             delay_ms(2);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0182 
; 0000 0183             blink--;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0184             if (blink <= -blink_cycle) {
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0185                 blink = 1;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0186             }
; 0000 0187         }
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0188     } else {
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0189         // Day Right
; 0000 018A         PORTB = 0b10111111;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 018B         PORTA = segments[day_r];
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 018C         delay_ms(2);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 018D 
; 0000 018E         // Day Left
; 0000 018F         PORTB = 0b11011111;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 0190         PORTA = segments[day_l];
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0191         delay_ms(2);
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0192     }
;PCODE: $000002CA VOL: 0
; 0000 0193     //Month
; 0000 0194     if (setting_pos == 3) {
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0195         if (blink > 0) {
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0196             // Month Right
; 0000 0197             PORTB = 0b11101111;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0198             PORTA = 0x00;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0199             delay_ms(2);
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 019A             // Month Left
; 0000 019B             PORTB = 0b11110111;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 019C             PORTA = 0x00;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 019D             delay_ms(2);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 019E 
; 0000 019F             blink++;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 01A0             if (blink >= blink_cycle) {
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 01A1                 blink = -1;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 01A2             }
; 0000 01A3         } else {
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01A4             // Month Right
; 0000 01A5             PORTB = 0b11101111;
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01A6             PORTA = segments[month_r];
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01A7             delay_ms(2);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01A8             // Month Left
; 0000 01A9             PORTB = 0b11110111;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01AA             PORTA = segments[month_l];
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01AB             delay_ms(2);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 01AC 
; 0000 01AD             blink--;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 01AE             if (blink <= -blink_cycle) {
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 01AF                 blink = 1;
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 01B0             }
; 0000 01B1         }
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 01B2     } else {
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01B3         // Month Right
; 0000 01B4         PORTB = 0b11101111;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01B5         PORTA = segments[month_r];
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01B6         delay_ms(2);
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 01B7         // Month Left
; 0000 01B8         PORTB = 0b11110111;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 01B9         PORTA = segments[month_l];
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 01BA         delay_ms(2);
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 01BB     }
;PCODE: $0000031F VOL: 0
; 0000 01BC 
; 0000 01BD     //Year
; 0000 01BE     if (setting_pos == 2) {
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 01BF         if (blink > 0) {
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 01C0             // Year Right
; 0000 01C1             PORTB = 0b11111101;
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 01C2             PORTA = 0x00;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 01C3             delay_ms(2);
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 01C4 
; 0000 01C5             // Year Left
; 0000 01C6             PORTB = 0b11111110;
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 01C7             PORTA = 0x00;
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 01C8             delay_ms(2);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 01C9 
; 0000 01CA             PORTB = 0b01111111;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 01CB 
; 0000 01CC             blink++;
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01CD             if (blink >= blink_cycle) {
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 01CE                 blink = -1;
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 01CF             }
; 0000 01D0         } else {
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 01D1             // Year Right
; 0000 01D2             PORTB = 0b11111101;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 01D3             PORTA = segments[year_r];
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 01D4             delay_ms(2);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 01D5 
; 0000 01D6             // Year Left
; 0000 01D7             PORTB = 0b11111110;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 01D8             PORTA = segments[year_l];
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 01D9             delay_ms(2);
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 01DA 
; 0000 01DB             PORTB = 0b01111111;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 01DC 
; 0000 01DD             blink--;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01DE             if (blink <= -blink_cycle) {
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 01DF                 blink = 1;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 01E0             }
; 0000 01E1         }
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 01E2     } else {
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 01E3         // Year Right
; 0000 01E4         PORTB = 0b11111101;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 01E5         PORTA = segments[year_r];
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 01E6         delay_ms(2);
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 01E7 
; 0000 01E8         // Year Left
; 0000 01E9         PORTB = 0b11111110;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 01EA         PORTA = segments[year_l];
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01EB         delay_ms(2);
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 01EC 
; 0000 01ED         PORTB = 0b01111111;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01EE     }
;PCODE: $0000037A VOL: 0
; 0000 01EF }
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;void main(void)
; 0000 01F1 {
;PCODE: $0000037F VOL: 0
; 0000 01F2 // Declare your local variables here
; 0000 01F3 
; 0000 01F4 // Input/Output Ports initialization
; 0000 01F5 // Port A initialization
; 0000 01F6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 01F7 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 01F8 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 01F9 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 01FA 
; 0000 01FB // Port B initialization
; 0000 01FC // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=Out
; 0000 01FD DDRB=(0<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 01FE // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=0
; 0000 01FF PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0200 
; 0000 0201 // Port C initialization
; 0000 0202 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0203 DDRC=(1<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 0204 // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0205 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 0206 
; 0000 0207 // Port D initialization
; 0000 0208 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0209 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 020A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 020B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 020C 
; 0000 020D // Timer/Counter 0 initialization
; 0000 020E // Clock source: System Clock
; 0000 020F // Clock value: Timer 0 Stopped
; 0000 0210 // Mode: Normal top=0xFF
; 0000 0211 // OC0 output: Disconnected
; 0000 0212 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 0213 TCNT0=0x00;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 0214 OCR0=0x00;
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0215 
; 0000 0216 // Timer/Counter 1 initialization
; 0000 0217 // Clock source: System Clock
; 0000 0218 // Clock value: 31.250 kHz
; 0000 0219 // Mode: CTC top=OCR1A
; 0000 021A // OC1A output: Disconnected
; 0000 021B // OC1B output: Disconnected
; 0000 021C // Noise Canceler: Off
; 0000 021D // Input Capture on Falling Edge
; 0000 021E // Timer Period: 1 s
; 0000 021F // Timer1 Overflow Interrupt: Off
; 0000 0220 // Input Capture Interrupt: Off
; 0000 0221 // Compare A Match Interrupt: On
; 0000 0222 // Compare B Match Interrupt: Off
; 0000 0223 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 0224 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 0225 TCNT1H=0x00;
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 0226 TCNT1L=0x00;
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 0227 ICR1H=0x00;
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 0228 ICR1L=0x00;
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 0229 OCR1AH=0x7A;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 022A OCR1AL=0x12;
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 022B OCR1BH=0x00;
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 022C OCR1BL=0x00;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 022D 
; 0000 022E // Timer/Counter 2 initialization
; 0000 022F // Clock source: System Clock
; 0000 0230 // Clock value: Timer2 Stopped
; 0000 0231 // Mode: Normal top=0xFF
; 0000 0232 // OC2 output: Disconnected
; 0000 0233 ASSR=0<<AS2;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0234 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0235 TCNT2=0x00;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0236 OCR2=0x00;
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 0237 
; 0000 0238 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0239 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 023A 
; 0000 023B // External Interrupt(s) initialization
; 0000 023C // INT0: On
; 0000 023D // INT0 Mode: Falling Edge
; 0000 023E // INT1: On
; 0000 023F // INT1 Mode: Falling Edge
; 0000 0240 // INT2: On
; 0000 0241 // INT2 Mode: Falling Edge
; 0000 0242 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0243 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 0244 MCUCSR=(0<<ISC2);
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 0245 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 0246 
; 0000 0247 // USART initialization
; 0000 0248 // USART disabled
; 0000 0249 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 024A 
; 0000 024B // Analog Comparator initialization
; 0000 024C // Analog Comparator: Off
; 0000 024D // The Analog Comparator's positive input is
; 0000 024E // connected to the AIN0 pin
; 0000 024F // The Analog Comparator's negative input is
; 0000 0250 // connected to the AIN1 pin
; 0000 0251 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0252 SFIOR=(0<<ACME);
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 0253 
; 0000 0254 // ADC initialization
; 0000 0255 // ADC disabled
; 0000 0256 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 0257 
; 0000 0258 // SPI initialization
; 0000 0259 // SPI disabled
; 0000 025A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 025B 
; 0000 025C // TWI initialization
; 0000 025D // TWI disabled
; 0000 025E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 025F 
; 0000 0260 // Global enable interrupts
; 0000 0261 #asm("sei")
;PCODE: $000003C9 VOL: 0
	sei
;PCODE: $000003CA VOL: 0
; 0000 0262 
; 0000 0263 while (1){
;PCODE: $000003CB VOL: 0
; 0000 0264     if (is_setting) {
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 0265         write_setting_mode();
;PCODE: $000003CF VOL: 0
; 0000 0266     } else {
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 0267         write();
;PCODE: $000003D2 VOL: 0
; 0000 0268     }
;PCODE: $000003D3 VOL: 0
; 0000 0269 
; 0000 026A }
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 026B }
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
